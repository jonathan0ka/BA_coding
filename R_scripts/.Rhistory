# Calculate the standard deviation of returns
sd_aapl <- sd(na.omit(returns_aapl))
sd_ubs <- sd(na.omit(returns_ubs))
# Print the standard deviations
cat("Standard Deviation of Apple Returns:", sd_aapl, "\n")
cat("Standard Deviation of UBS Returns:", sd_ubs, "\n")
# Index the prices to start at 100
indexed_aapl <- Cl(AAPL) / first(Cl(AAPL)) * 100
indexed_ubs <- Cl(UBS) / first(Cl(UBS)) * 100
# Combine the indexed prices into a data frame
indexed_prices <- data.frame(Date=index(AAPL), AAPL=indexed_aapl, UBS=indexed_ubs)
# Print the first few rows of the indexed prices
head(indexed_prices)
# Calculate the standard deviation of returns
sd(na.omit(returns_aapl)) * sqrt(252)
sd(na.omit(returns_ubs)) * sqrt(252)
# Calculate the standard deviation of returns
sd(na.omit(returns_aapl)) * sqrt(252)
sd(na.omit(returns_ubs)) * sqrt(252)
# Load necessary libraries
library(quantmod)
library(ggplot2)
# Set the start date for one year ago
start_date <- Sys.Date() - 365
# Download stock data for UBS and Apple
getSymbols("UBS", src = "yahoo", from = start_date)
getSymbols("AAPL", src = "yahoo", from = start_date)
getSymbols("URTH", src = "yahoo", from = start_date)
# Extract Adjusted Close prices
ubs_prices <- Cl(UBS)
apple_prices <- Cl(AAPL)
world_prices <- Cl(URTH)
# Create data frames for UBS and Apple
ubs_df <- data.frame(Date=index(UBS), Stock="UBS", Close=ubs_prices)
apple_df <- data.frame(Date=index(AAPL), Stock="Apple", Close=apple_prices)
world_df <- data.frame(Date=index(URTH), Stock="World", Close=world_prices)
colnames(ubs_df) <- c("date", "stock", "close")
colnames(apple_df) <- c("date", "stock", "close")
colnames(world_df) <- c("date", "stock", "close")
apple_df$returns <- apple_df$close/first(apple_df$close)
ubs_df$returns <- ubs_df$close/first(ubs_df$close)
world_df$returns <- world_df$close/first(world_df$close)
# Combine the data frames
stock_data <- rbind(ubs_df, apple_df, world_df)
# Plot the data using ggplot2
ggplot(stock_data, aes(x=date, y=returns, color=stock, group=stock)) +
geom_line() +
labs(title = "Daily Close Prices of UBS and Apple",
x = "Date",
y = "Price Index") +
theme_minimal() +
scale_color_manual(values = c("UBS" = "red", "Apple" = "blue", "World" = "black"))
# Split the data by stock
ubs_data <- stock_data[stock_data$stock == "UBS", ]
apple_data <- stock_data[stock_data$stock == "Apple", ]
world_data <- stock_data[stock_data$stock == "World", ]
# Create the plot
plot(ubs_data$date, ubs_data$returns, type = "l", col = "red", ylim = range(stock_data$returns),
xlab = "Date", ylab = "Price Index", main = "Daily Close Prices of UBS and Apple")
# Add lines for each stock
lines(ubs_data$date, ubs_data$returns, col = "red")
lines(apple_data$date, apple_data$returns, col = "blue")
lines(world_data$date, world_data$returns, col = "black")
# Add a legend
legend("topleft", legend = c("UBS", "Apple", "World"), col = c("red", "blue", "black"), lty = 1, cex = 1.1, bty = "n")
# Split the data by stock
ubs_data <- stock_data[stock_data$stock == "UBS", ]
apple_data <- stock_data[stock_data$stock == "Apple", ]
world_data <- stock_data[stock_data$stock == "World", ]
# Create the plot
plot(ubs_data$date, ubs_data$returns, type = "l", col = "red", ylim = range(stock_data$returns),
xlab = "Date", ylab = "Price Index", main = "Daily Close Prices of UBS and Apple")
# Add lines for each stock
lines(ubs_data$date, ubs_data$returns, col = "red")
lines(apple_data$date, apple_data$returns, col = "blue")
lines(world_data$date, world_data$returns, col = "black")
# Add a legend
legend("topleft", legend = c("UBS", "Apple", "World"), col = c("red", "blue", "black"), lty = c(1, 1, 2), cex = 1.1, bty = "n")
# Split the data by stock
ubs_data <- stock_data[stock_data$stock == "UBS", ]
apple_data <- stock_data[stock_data$stock == "Apple", ]
world_data <- stock_data[stock_data$stock == "World", ]
# Create the plot
plot(ubs_data$date, ubs_data$returns, type = "l", col = "red", ylim = range(stock_data$returns),
xlab = "Date", ylab = "Price Index", main = "Daily Close Prices of UBS and Apple")
# Add lines for each stock
lines(ubs_data$date, ubs_data$returns, col = "red")
lines(apple_data$date, apple_data$returns, col = "blue")
lines(world_data$date, world_data$returns, col = "black", lty = 2)
# Add a legend
legend("topleft", legend = c("UBS", "Apple", "World"), col = c("red", "blue", "black"), lty = c(1, 1, 2), cex = 1.1, bty = "n")
# Split the data by stock
ubs_data <- stock_data[stock_data$stock == "UBS", ]
apple_data <- stock_data[stock_data$stock == "Apple", ]
world_data <- stock_data[stock_data$stock == "World", ]
# Create the plot
plot(ubs_data$date, ubs_data$returns, type = "l", col = "red", ylim = range(stock_data$returns),
xlab = "Date", ylab = "Price Index", main = "Daily Close Prices of UBS and Apple")
# Add lines for each stock
lines(ubs_data$date, ubs_data$returns, col = "red")
lines(apple_data$date, apple_data$returns, col = "blue")
lines(world_data$date, world_data$returns, col = "black", lty = 1.5)
# Add a legend
legend("topleft", legend = c("UBS", "Apple", "World"), col = c("red", "blue", "black"), lty = c(1, 1, 2), cex = 1.1, bty = "n")
# Split the data by stock
ubs_data <- stock_data[stock_data$stock == "UBS", ]
apple_data <- stock_data[stock_data$stock == "Apple", ]
world_data <- stock_data[stock_data$stock == "World", ]
# Create the plot
plot(ubs_data$date, ubs_data$returns, type = "l", col = "red", ylim = range(stock_data$returns),
xlab = "Date", ylab = "Price Index", main = "Daily Close Prices of UBS and Apple")
# Add lines for each stock
lines(ubs_data$date, ubs_data$returns, col = "red")
lines(apple_data$date, apple_data$returns, col = "blue")
lines(world_data$date, world_data$returns, col = "black", lty = 3)
# Add a legend
legend("topleft", legend = c("UBS", "Apple", "World"), col = c("red", "blue", "black"), lty = c(1, 1, 2), cex = 1.1, bty = "n")
# Split the data by stock
ubs_data <- stock_data[stock_data$stock == "UBS", ]
apple_data <- stock_data[stock_data$stock == "Apple", ]
world_data <- stock_data[stock_data$stock == "World", ]
# Create the plot
plot(ubs_data$date, ubs_data$returns, type = "l", col = "red", ylim = range(stock_data$returns),
xlab = "Date", ylab = "Price Index", main = "Daily Close Prices of UBS and Apple")
# Add lines for each stock
lines(ubs_data$date, ubs_data$returns, col = "red")
lines(apple_data$date, apple_data$returns, col = "blue")
lines(world_data$date, world_data$returns, col = "black", lty = 3)
# Add a legend
legend("topleft", legend = c("UBS", "Apple", "World"), col = c("red", "blue", "black"), lty = c(1, 1, 3), cex = 1.1, bty = "n")
# Split the data by stock
ubs_data <- stock_data[stock_data$stock == "UBS", ]
apple_data <- stock_data[stock_data$stock == "Apple", ]
world_data <- stock_data[stock_data$stock == "World", ]
# Create the plot
plot(ubs_data$date, ubs_data$returns, type = "l", col = "red", ylim = range(stock_data$returns),
xlab = "Date", ylab = "Price Index", main = "Daily Prices of UBS and Apple")
# Add lines for each stock
lines(ubs_data$date, ubs_data$returns, col = "red")
lines(apple_data$date, apple_data$returns, col = "blue")
lines(world_data$date, world_data$returns, col = "black", lty = 3)
# Add a legend
legend("topleft", legend = c("UBS", "Apple", "World"), col = c("red", "blue", "black"), lty = c(1, 1, 3), cex = 1.1, bty = "n")
# Useful packages:
library(tidyverse)
library(kableExtra)
knitr::opts_chunk$set(echo = FALSE, results = "hide")
data_lab_experiment <-
read.table("https://dataverse.harvard.edu/api/access/datafile/:persistentId?persistentId=doi:10.7910/DVN/27366/VOLGZD",
header = TRUE, fill = TRUE)
proportions <- data_lab_experiment %>%
mutate(overhead_level = case_when(noover == 1 ~ 0,
(high == 1) | (highcover == 1) ~ 50,
(low == 1) | (lowcover == 1) ~ 5),
cover = case_when(noover == 1 ~ "control",
(highcover == 1) |  (lowcover == 1) ~ "covered",
TRUE ~ "not covered")) %>%
group_by(overhead_level, cover) %>%
count(allocation) %>%
group_by(overhead_level, cover) %>%
mutate(sum = sum(n),
freq = n/sum(n)) %>%
filter(allocation == 1) %>%
dplyr::select(-allocation) %>%
mutate(CI_lower = prop.test(n, sum)$conf.int[1],
CI_upper = prop.test(n, sum)$conf.int[2]) %>%
ungroup() %>%
mutate(Treatment = c(1, 4, 2, 5, 3))
proportions %>%
dplyr::select(c(1:4,8)) %>%
rename("Overhead level (%)" = overhead_level,
"Group" = cover,
"No. of donations to charity:water" = n,
"Total participants" = sum) %>%
kableExtra::kable() %>%
kable_classic(full_width = F) %>%
kable_styling(latex_options = "hold_position")
proportions
head(data_lab_experiment)
head(proportions)
?prop.test
prop.test(proportions[1, 4], proportions[1, 3], proportions[1, 5])
prop.test(proportions[1, 4], proportions[1, 3])
proportions[1, 4]
proportions[1, 3]
proportions[1, 4]
prop.test(proportions[1, 3], proportions[1, 4])
proportions[1, 3]
proportions[1, 4]
proportions[1, 4]
head(proportions)
head(data_lab_experiment)
head(proportions)
control_participants <- proportions[1, 4]
control_donations <- proportions[1, 3]
# Empty vectors to store the results
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
# Loop through each group and perform the test
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)  # two-tailed test to z-value conversion
p_values[i] <- test$p.value
}
head(proportions)
head(data_lab_experiment)
head(proportions)
donations <- proportions[, 3]
groups <- proportions[, 2]
participants <- proportions[, 4]
control_participants <- proportions[1, 4]
control_donations <- proportions[1, 3]
# Empty vectors to store the results
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
# Loop through each group and perform the test
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)  # two-tailed test to z-value conversion
p_values[i] <- test$p.value
}
donations <- proportions[, 3]
groups <- proportions[, 2]
participants <- proportions[, 4]
control_participants <- proportions[1, 4]
control_donations <- proportions[1, 3]
# Empty vectors to store the results
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
# Loop through each group and perform the test
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)  # two-tailed test to z-value conversion
p_values[i] <- test$p.value
}
proportions[1, 4]
control_donations
donations[i]
participants[i]
# Loop through each group and perform the test
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)  # two-tailed test to z-value conversion
p_values[i] <- test$p.value
}
i <- 1
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
c(control_donations, donations[i])
c(control_participants, participants[i])
c(control_donations, donations[i])
donations <- proportions[, 3]
groups <- proportions[, 2]
participants <- proportions[, 4]
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
i <- 1
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
i <- 1
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
# Create a data frame for the results
results <- data.frame(Group = groups, Z_Value = z_values, P_Value = p_values)
head(data_lab_experiment)
head(proportions)
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
i <- 1
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
# Create a data frame for the results
results <- data.frame(Group = groups, Z_Value = z_values, P_Value = p_values)
groups
z_values
head(data_lab_experiment)
head(proportions)
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
# Create a data frame for the results
results <- data.frame(Group = groups, Z_Value = z_values, P_Value = p_values)
groups
z_values
p_values
# Create a data frame for the results
results <- data.frame(Group = groups, Z_Value = z_values[-1], P_Value = p_values[-1])
print(results)
head(data_lab_experiment)
head(proportions)
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
# Store the z-value and p-value
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
# Create a data frame for the results
results <- data.frame(Group = groups, Z_Value = z_values[1:4], P_Value = p_values[1:4])
print(results)
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
results <- data.frame(Group = groups, Z_Value = z_values, P_Value = p_values)
results <- data.frame(Group = c(groups, "control"), Z_Value = z_values, P_Value = p_values)
print(results)
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
results <- data.frame(Group = c(groups, "control"), Z_Value = z_values, P_Value = p_values)
print(results)
p1 <- 0.65
p2 <- 0.75
power <- 0.80
sig_level <- 0.05
######
effect_size <- ES.h(p1, p2)
# Calculate the sample size
sample_size <- power.prob.test(h = effect_size, power = power, sig.level = sig_level)
s
p1 <- 0.65
p2 <- 0.75
power <- 0.80
sig_level <- 0.05
######
effect_size <- ES.h(p1, p2)
library(pwr)
install.packages("pwr")
install.packages("pwr")
library(pwr)
library(pwr)
p1 <- 0.65
p2 <- 0.75
power <- 0.80
sig_level <- 0.05
######
effect_size <- ES.h(p1, p2)
# Calculate the sample size
sample_size <- power.prob.test(h = effect_size, power = power, sig.level = sig_level)
# Calculate the sample size
sample_size <- power.prob.test(0.65, 0.75, power = 0.8, sig_level=0.05, alternative = "onesided")
# Calculate the sample size
sample_size <- power.prob.test(0.65, 0.75, power = 0.8, sig_level=0.05, alternative = "onesided")
# Calculate the sample size
sample_size <- power.prop.test(0.65, 0.75, power = 0.8, sig_level=0.05, alternative = "onesided")
?power.prop.test
# Calculate the sample size
sample_size <- power.prop.test(0.65, 0.75, power = 0.8, sig_level=0.05, alternative = "one.sided")
# Calculate the sample size
sample_size <- power.prop.test(p1 = 0.65, p2 = 0.75, power = 0.8, sig_level=0.05, alternative = "one.sided")
# Calculate the sample size
sample_size <- power.prop.test(p1 = 0.65, p2 = 0.75, power = 0.8, sig.level=0.05, alternative = "one.sided")
print(sample_size)
head(proportions)
data_lab_experiment <-
read.table("https://dataverse.harvard.edu/api/access/datafile/:persistentId?persistentId=doi:10.7910/DVN/27366/VOLGZD",
header = TRUE, fill = TRUE)
proportions <- data_lab_experiment %>%
mutate(overhead_level = case_when(noover == 1 ~ 0,
(high == 1) | (highcover == 1) ~ 50,
(low == 1) | (lowcover == 1) ~ 5),
cover = case_when(noover == 1 ~ "control",
(highcover == 1) |  (lowcover == 1) ~ "covered",
TRUE ~ "not covered")) %>%
group_by(overhead_level, cover) %>%
count(allocation) %>%
group_by(overhead_level, cover) %>%
mutate(sum = sum(n),
freq = n/sum(n)) %>%
filter(allocation == 1) %>%
dplyr::select(-allocation) %>%
mutate(CI_lower = prop.test(n, sum)$conf.int[1],
CI_upper = prop.test(n, sum)$conf.int[2]) %>%
ungroup() %>%
mutate(Treatment = c(1, 4, 2, 5, 3))
proportions %>%
dplyr::select(c(1:4,8)) %>%
rename("Overhead level (%)" = overhead_level,
"Group" = cover,
"No. of donations to charity:water" = n,
"Total participants" = sum) %>%
kableExtra::kable() %>%
kable_classic(full_width = F) %>%
kable_styling(latex_options = "hold_position")
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(proportions$cover))
p_values <- numeric(length(proportions$cover))
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
results <- data.frame(Group = c(groups, "control"), Z_Value = z_values, P_Value = p_values)
print(results)
proportions$cover
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- numeric(length(groups))
p_values <- numeric(length(groups))
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
results <- data.frame(Group = c(groups, "control"), Z_Value = z_values, P_Value = p_values)
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- 5
p_values <- 5
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
results <- data.frame(Group = c(groups, "control"), Z_Value = z_values, P_Value = p_values)
```{r}
groups <- c('covered 5%', 'not covered 5%', 'covered 50%', 'not covered 50%')
donations <- c(70, 60, 65, 43)
participants <- c(91, 90, 91, 87)
control_participants <- 90
control_donations <- 66
z_values <- 5
p_values <- 5
for (i in 1:length(groups)) {
test <- prop.test(c(control_donations, donations[i]), c(control_participants, participants[i]), correct = FALSE)
z_values[i] <- qnorm(test$p.value / 2)
p_values[i] <- test$p.value
}
results <- data.frame(Group = c(groups, "control"), Z_Value = z_values, P_Value = p_values)
c(groups, "control")
z_values
p_values
results <- data.frame(Group = c(groups), Z_Value = z_values, P_Value = p_values)
print(results)
adjusted_rq1 = p.adjust(results$P_Value, method = "holm")
print(adjusted_rq1)
adjusted_rq1 = p.adjust(results$P_Value, method = "holm")
print(adjusted_rq1)
?p.adjust
